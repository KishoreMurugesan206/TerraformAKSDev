# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: Provider-Versions

jobs:
  - job: Terraform_Job
    steps:
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: '$(terraform)'
        displayName: 'Install Terraform'

      - script: |
          # echo "AZUREAD_VERSION: \"$(AZUREAD)\""
          echo "AZURERM_VERSION: \"$(AZURERM)\""
          echo "RANDOM_VERSION: \"$(RANDOM)\""
          # echo "TIME_VERSION: \"$(TIME)\""
        displayName: "Debug Provider Versions" 

      - script: |
          sed "s/\${AZURERM}/$(AZURERM)/; s/\${RANDOM}/$(RANDOM)/" 03-TF-Create-AKS-Cluster/01a-main.tf.tpl > main.tf
        displayName: 'Generate Terraform Configuration'

      
      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)'
          contents: '01a-main.tf.tpl'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
        displayName: 'Copy file to Artifact Staging Directory'  

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'tf-config'
          publishLocation: 'Container'
        displayName: 'Publish Build Artifacts'  

      
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'tf-config'
          downloadPath: '$(Pipeline.Workspace)/tf-config'
        displayName: 'Download Build Artifacts'  
    
  
      - task: TerraformTaskV4@4
        displayName: 'Terraform init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'az-sc-pipeline'
          backendAzureRmResourceGroupName: 'rg-kishore-test'
          backendAzureRmStorageAccountName: 'tfstateaks02'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'terraform.tfstate'
          commandOptions: '-backend-config=$(Pipeline.Workspace)/tf-config/01a-main.tf.tpl'
          # workingDirectory: '$(System.DefaultWorkingDirectory)/TerraformAKSDev/03-TF-Create-AKS-Cluster'
        

      - task: TerraformTaskV4@4
        displayName: 'Terraform Plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          # workingDirectory: '$(System.DefaultWorkingDirectory)/TerraformAKSDev/03-TF-Create-AKS-Cluster'
    
