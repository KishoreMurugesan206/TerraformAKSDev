# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: Provider-Versions

jobs:
  - job: Terraform_Job
    steps:
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: '$(terraform)'

  # - task: TerraformInstaller@1
  #   displayName: 'Install Terraform'
  #   inputs:
  #     terraformVersion: '$(terraform)'
      - script: |
          # echo "AZUREAD_VERSION: \"$(AZUREAD)\""
          echo "AZURERM_VERSION: \"$(AZURERM)\""
          echo "RANDOM_VERSION: \"$(RANDOM)\""
          # echo "TIME_VERSION: \"$(TIME)\""
        displayName: "Debug Provider Versions" 

      - script: |
          sed "s/\${AZURERM}/$(AZURERM)/; s/\${RANDOM}/$(RANDOM)/" 03-TF-Create-AKS-Cluster/01a-main.tf.tpl > main.tf
        displayName: 'Generate Terraform Configuration'

      - task: TerraformTaskV4@4
        displayName: 'Terraform init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'az-sc-pipeline'
          backendAzureRmResourceGroupName: 'rg-kishore-test'
          backendAzureRmStorageAccountName: 'tfstateaks01'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/TerraformAKSDev/03-TF-Create-AKS-Cluster'
        

      - task: TerraformTaskV4@4
        displayName: 'Terraform Plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/TerraformAKSDev/03-TF-Create-AKS-Cluster'
    
